const AdvancedSocketDebug=JSON.parse(document.body.dataset.debug||!1),AdvancedSocket={debugStyle:'color:OrangeRed; font-weight:400; ',clientID:0,clientInfo:{advancedsocket:!0},debug:AdvancedSocketDebug,timer:0,timerCount:0,options:{},ui:{},init(){this.doLog('%cAdvancedSocket.init',this.debugStyle),this.options={autoConnect:!0,channels:'',doMessage:'doMessage',name:'ws',pingUrl:'',statusLabel:'status-message',ipApiLookup:!1,ipApiService:'ip-api.com',ipApiKey:'',...document.body.dataset},this.options.autoConnect=JSON.parse(this.options.autoConnect||!0),this.options.ipApiLookup=JSON.parse(this.options.ipApiLookup||!1),this.options.offlineTimer=1e3*(parseFloat(this.options.offlineTimer)||5),this.options.onlineTimer=1e3*(parseFloat(this.options.onlineTimer)||30),this.options.reconnectTimer=1e3*(parseFloat(this.options.reconnectTimer)||.5),this.ui.statusLabel=document.getElementById(this.options.statusLabel||'status-message'),this.timerCount=this.options.onlineTimer,this.setupListeners(),this.checkConnection()},checkConnection(){clearTimeout(this.timer),navigator.onLine&&''!==this.options.pingUrl&&this.options.autoConnect&&(this.doLog('%cAdvancedSocket.checkConnection',this.debugStyle),this.timer=setTimeout((()=>{this.ping()}),this.timerCount))},dispatchEvent(e,t={}){this.doLog('%cAdvancedSocket.dispatchEvent',this.debugStyle,{name:e,data:t});const n=new CustomEvent(e,{detail:t,bubbles:!0,cancelable:!0});window.dispatchEvent(n)},forceReconnect(){this.doLog('%cAdvancedSocket.forceReconnect',this.debugStyle),'object'==typeof window[this.options.name]&&(window[this.options.name].closeConnection(),window[this.options.name].openConnection())},async getIPInfo(){this.doLog('%cAdvancedSocket.getIPInfo',this.debugStyle);const e=new AbortController,t=setTimeout((()=>{e.abort()}),5e3);try{const n='ip-api.com'===this.options.ipApiService?'http://ip-api.com/json/':`https://api.ipapi.com/api/check?access_key=${this.options.ipApiKey}`,o=await fetch(n,{signal:e.signal});if(clearTimeout(t),o.ok){const e=await o.json();(e.ip||e.query)&&(e.query&&(e.ip=e.query),delete e.status,delete e.query,this.clientInfo.geo={...e})}}catch(e){if('AbortError'===e.name)return;console.error('Fetch error:',e)}finally{this.options.autoConnect&&this.subscribe()}},handleConnectionError(e){this.doLog('%cAdvancedSocket.Event',this.debugStyle,{type:'connectionerror',event:e}),this.setTimer(!1),this.disconnected()},handleGoodConnection(e){this.doLog('%cAdvancedSocket.Event',this.debugStyle,{type:'goodconnection',event:e}),this.setTimer(!0),this.connected()},handleRequireConnection(e){this.doLog('%cAdvancedSocket.Event',this.debugStyle,{type:'requireconnection',event:e}),this.forceReconnect()},handleOffline(e){this.setTimer(!1),this.disconnected(),clearTimeout(this.timer),this.doLog('%cAdvancedSocket.Event',this.debugStyle,{type:'offline',event:e})},handleOnline(e){this.doLog('%cAdvancedSocket.Event',this.debugStyle,{type:'online',event:e}),this.checkConnection()},async ping(e){this.doLog('%cAdvancedSocket.ping',this.debugStyle);const t=new AbortController,n=setTimeout((()=>{t.abort(),this.dispatchEvent('connectiontimeout')}),5e3);try{const e=new FormData;e.append('clientID',this.clientID),e.append('channels',this.options.channels);const o=await fetch(this.options.pingUrl,{method:'POST',body:e,signal:t.signal});if(clearTimeout(n),o.ok){!0===(await o.json()).success?this.dispatchEvent('goodconnection'):this.dispatchEvent('requireconnection')}else this.dispatchEvent('connectionerror')}catch(e){if('AbortError'===e.name)return;this.dispatchEvent('connectionerror')}finally{this.checkConnection()}},processAuthentication(e){this.doLog('%cAdvancedSocket.processAuthenticationResponse',this.debugStyle,e),-1===e.code?this.doLog('%cAdvancedSocket -> Authentication failed',this.debugStyle):0===e.code&&(this.subscribe(),this.autoConnect=!0,this.checkConnection()),this.connected()},processMessage(e){this.doLog('%cAdvancedSocket.processMessage',this.debugStyle,e),'data'===e.type&&(this.options.doMessage&&!this.doMessageFunc&&(this.doMessageFunc=window[this.options.doMessage]),'FORCE-RECONNECT'===e.data&&setTimeout((()=>this.forceReconnect()),this.options.reconnectTimer),this.doMessageFunc&&'function'==typeof this.doMessageFunc?this.doMessageFunc(e):this.doLog('%cAdvancedSocket : Create a doMessage function and pass it in the data-do-message attribute of the body',this.debugStyle))},setTimer(e){this.doLog('%cAdvancedSocket.setTimer',this.debugStyle,{isOnline:e}),e?this.timerCount!==this.options.onlineTimer&&(this.timerCount=this.options.onlineTimer):this.timerCount=this.options.offlineTimer},setupListeners(){this.doLog('%cAdvancedSocket.setupListeners',this.debugStyle),window.addEventListener('connectionerror',this.handleConnectionError.bind(this)),window.addEventListener('goodconnection',this.handleGoodConnection.bind(this)),window.addEventListener('requireconnection',this.handleRequireConnection.bind(this)),window.addEventListener('offline',this.handleOffline.bind(this),!1),window.addEventListener('online',this.handleOnline.bind(this),!1)},subscribe(){this.doLog('%cAdvancedSocket.subscribe',this.debugStyle),'string'==typeof this.options.channels&&(this.options.channels=this.options.channels.split(',')),this.options.channels.forEach(((e,t)=>{this.doLog(`%c\tSubscribing to ${e} : ${t+1} of ${this.options.channels.length}`,this.debugStyle);let n={clientinfo:this.clientInfo};this.clientInfo.username&&(n.username=this.clientInfo.username),window[this.options.name].subscribe(e,n)}))},onClose(e){const t=AdvancedSocket;t.doLog('%cAdvancedSocket.onClose',t.debugStyle,e)},onError(e){const t=AdvancedSocket;t.doLog('%AdvancedSocket.onError',t.debugStyle,e)},onMessage(e){const t=AdvancedSocket;switch(t.doLog('%cAdvancedSocket.onMessage',t.debugStyle,e),e.reqType){case'welcome':t.clientID=e.clientid,t.connecting();break;case'authenticate':t.processAuthentication(e);break;case'subscribe':t.connected();break;default:t.processMessage(e)}},onOpen(){const e=AdvancedSocket;e.doLog('%cAdvancedSocket.onOpen',e.debugStyle),e.clientInfo.username&&e.clientInfo.password&&e.autoConnect&&(e.autoConnect=!1,window[e.options.name].authenticate(e.clientInfo.username,e.clientInfo.password)),e.options.ipApiLookup?e.getIPInfo():e.options.autoConnect&&e.subscribe()},disconnected(){this.doLog('%cAdvancedSocket.disconnected',this.debugStyle),this.ui.statusLabel&&(this.ui.statusLabel.innerHTML='We are disconnected!!!')},connecting(){this.doLog('%cAdvancedSocket.connecting',this.debugStyle),this.ui.statusLabel&&(this.ui.statusLabel.innerHTML='We are connecting ...')},connected(){this.doLog('%cAdvancedSocket.connected',this.debugStyle),this.ui.statusLabel&&(this.ui.statusLabel.innerHTML='We are connected!!!')},doLog:AdvancedSocketDebug?console.log.bind(window.console):function(){}};AdvancedSocket.init();